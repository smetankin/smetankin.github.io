{"version":3,"sources":["store/reducers/rootReducer.js","store/reducers/weather.js","store/reducers/favorites.js","store/reducers/cityKey.js","components/Header/Header.js","api/helper.js","api/weather.js","store/actions/weather.js","store/actions/cityKey.js","helpers/getCelsium.js","components/Weather/Weather.js","components/Input/Input.js","components/WeatherToday/WeatherToday.js","components/AddToFavorites/AddToFavorites.js","components/MainForm/MainForm.js","store/actions/favorites.js","components/Favorites/Favorites.js","containers/App.js","serviceWorker.js","index.js"],"names":["rootReducer","combineReducers","weather","state","action","type","payload","cityKey","weatherData","favorites","JSON","parse","localStorage","getItem","slice","indexOf","cityName","isCurrent","map","i","Header","className","to","makeAPICall","url","options","fetch","then","response","ok","Error","statusText","res","json","API_KEY","getCityKeyByName","name","a","location","firstCity","Key","getWeatherByCityKey","cityInfo","DailyForecasts","autocompleateSearch","text","cities","weatherFetchDataSuccess","weatherFetchData","dispatch","cityKeyFromLocalStorage","includes","push","setItem","stringify","addCityKey","getWeatherInfoByCityKey","getCelsius","temp","Maximum","Value","Minimum","toFixed","Weather","getDayOfWeek","Date","props","date","getDay","Card","this","status","React","Component","Input","citiesAutocompleteList","citiesAutocompleteRequestTimeout","handleInputChange","e","setTimeout","target","value","data","setState","LocalizedName","Autocomplete","getOptionLabel","option","onChange","getWeather","style","width","renderInput","params","TextField","label","variant","fullWidth","WeatherToday","city","connect","currentCity","find","isCurrentCityInFavorites","Button","onClick","handleRemoveFromFavorites","color","handleAddToFavorites","MainForm","getWeatherData","match","prevProps","prevState","snapshot","history","currentCityWeatherData","currentCityFromRoute","item","Temperature","Day","IconPhrase","length","addToFavorites","removeFromFavorites","currentCityWeatherDataItem","index","key","EpochDate","mapDispatchToProps","favoritesFromLocalStorage","splice","withRouter","Favorites","forEach","favoriteCityNameObject","ck","weatherForCity","App","path","exact","Boolean","window","hostname","store","createStore","composeWithDevTools","applyMiddleware","thunk","logger","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.acde5b3c.chunk.js","sourcesContent":["import {combineReducers} from \"redux\";\nimport {weather} from \"./weather\";\nimport {favorites} from \"./favorites\";\nimport {cityKey} from \"./cityKey\"\n\nconst rootReducer = combineReducers({\n    weather, favorites, cityKey\n});\n\nexport default rootReducer;\n","export function weather(state = {}, action) {\n    switch (action.type) {\n        case \"WEATHER_FETCH_DATA_SUCCESS\":\n            return {\n                ...state,\n                [action.payload.cityKey]: action.payload.weatherData\n            }\n        default:\n            return state;\n    }\n}\n","export function favorites(state = JSON.parse(localStorage.getItem('favorites')) || [], action) {\n    switch (action.type) {\n        case \"ADD_TO_FAVORITES\":\n            return [...state, action.payload];\n        case \"REMOVE_FROM_FAVORITES\":\n            return [\n                ...state.slice(0, state.indexOf(action.payload)),\n                ...state.slice(state.indexOf(action.payload) + 1)\n            ];\n        default:\n            return state;\n    }\n}\n","export function cityKey(state = [{cityKey: \"215854\", cityName: \"Tel Aviv\", isCurrent: true}, ...(JSON.parse(localStorage.getItem('cityKey')) || [])], action) {\n    switch (action.type) {\n        case \"ADD_CITY_KEY\":\n            return [...(state.map(i => ({...i, isCurrent: false}))), { ...action.payload, isCurrent: true }];\n        default:\n            return state;\n    }\n}\n","import React from 'react';\nimport \"./header.css\";\nimport { Link } from \"react-router-dom\";\n\nfunction Header(){\n        return(\n            <header className={\"header\"}>\n                <div className=\"header-title\">\n                    Herolo Weather task\n                </div>\n                <div className=\"nav\">\n\n                    <Link to=\"/\">Home</Link>\n                    <Link to=\"/favorites\">Favorites</Link>\n\n                </div>\n            </header>\n        );\n}\nexport default Header;\n","export const makeAPICall = (url, options = {}) =>\n    fetch(url, options)\n        .then(response =>{\n            if(!response.ok){\n                throw  new Error(response.statusText)\n            }\n            return response;\n        }).then(res => res.json());\n","import { makeAPICall } from './helper';\n\nconst API_KEY = 'UD4SCAX3zLfke0bHjEDBBzaHNKSWBYs0';\n\nexport const getCityKeyByName = async (name) =>{\n\n    const location = await makeAPICall(`https://dataservice.accuweather.com/locations/v1/cities/autocomplete?apikey=${API_KEY}&q=${name}`);\n\n    const firstCity = location[0];\n    if (!firstCity) {\n        return null\n    }\n    return firstCity.Key;\n};\n\nexport const getWeatherByCityKey = async (cityKey) =>{\n    const cityInfo = await makeAPICall(`https://dataservice.accuweather.com/forecasts/v1/daily/5day/${cityKey}?apikey=${API_KEY}`);\n    return cityInfo.DailyForecasts;\n};\n\nexport const getWeatherInfoByCity = async (cityName) =>{\n    const cityKey = await getCityKeyByName(cityName);\n    const cityInfo = await makeAPICall(`https://dataservice.accuweather.com/forecasts/v1/daily/5day/${cityKey}?apikey=${API_KEY}`);\n    return cityInfo.DailyForecasts;\n};\n\nexport const autocompleateSearch = async (text) =>{\n    const cities = await makeAPICall(`http://dataservice.accuweather.com/locations/v1/cities/autocomplete?apikey=${API_KEY}&q=${text}`);\n    return cities;\n}\n","import { getCityKeyByName, getWeatherInfoByCity, getWeatherByCityKey } from '../../api/weather'\nimport {addCityKey} from \"../actions/cityKey\"\n\nexport function weatherFetchDataSuccess(weather){\n    return{\n        type : \"WEATHER_FETCH_DATA_SUCCESS\",\n        payload: weather\n    }\n}\n\nexport function weatherFetchData(name) {\n    return(dispatch) => {\n        getCityKeyByName(name)\n            .then((cityKey) => {\n                if (!cityKey) {\n                    return\n                }\n                dispatch(addCityKey({cityKey, cityName: name}))\n                getWeatherByCityKey(cityKey)\n                    .then(weather => dispatch(weatherFetchDataSuccess({ cityKey, weatherData: weather} )))\n            })\n    }\n}\n\nexport  function getWeatherInfoByCityKey(cityKey) {\n    return(dispatch) => {\n        getWeatherByCityKey(cityKey)\n            .then(weather => dispatch(weatherFetchDataSuccess({ cityKey, weatherData: weather} )))\n    }\n}\n","export function addCityKey(cityKey){\n    const cityKeyFromLocalStorage = JSON.parse(localStorage.getItem('cityKey')) || [];\n    if(!cityKeyFromLocalStorage.includes(cityKey)) {\n        cityKeyFromLocalStorage.push(cityKey);\n        localStorage.setItem('cityKey', JSON.stringify(cityKeyFromLocalStorage));\n    }\n    return{\n        type : \"ADD_CITY_KEY\",\n        payload: cityKey\n    }\n}\n","export const getCelsius = (temp) =>{\n    const farenheit = (temp.Maximum.Value + temp.Minimum.Value)/2;\n    const celsium = ((farenheit - 32)*5)/9;\n    return celsium.toFixed(0);\n}\n","import React from 'react';\nimport {getCelsius} from \"../../helpers/getCelsium\";\nimport \"./weather.css\"\n\nimport Card from '@material-ui/core/Card';\n\nclass  Weather extends React.Component{\n    getDayOfWeek = () =>{\n        const daysOfWeek = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\" ,\"Saturday\"];\n        const date = new Date(this.props.date*1000);\n        const day = date.getDay();\n        return daysOfWeek[day];\n    };\n\n    render() {\n        return(\n            <Card>\n                <div className=\"weather-block\">\n                    <div>\n                        {this.getDayOfWeek()}\n                    </div>\n                    <div>\n                        {this.props.status}\n                    </div>\n                    <div>\n                        {getCelsius(this.props.temp)}°C\n                    </div>\n                </div>\n            </Card>\n        )\n    }\n\n}\n\nexport default Weather;\n","import React, { Component } from 'react';\n\nimport {autocompleateSearch} from '../../api/weather';\nimport './input.css'\n\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\n\n\nclass Input extends Component {\n    state = {\n        citiesAutocompleteList: [],\n    };\n\n    citiesAutocompleteRequestTimeout = null;\n\n    handleInputChange = (e) => {\n        if (!this.citiesAutocompleteRequestTimeout) {\n            this.citiesAutocompleteRequestTimeout = setTimeout(() => this.citiesAutocompleteRequestTimeout = null, 1000)\n            autocompleateSearch(e.target.value)\n                .then(((data) => {\n                    data && this.setState({ citiesAutocompleteList: data.map(i => ({ cityName: i.LocalizedName, cityKey: i.Key })) });\n                } ))\n        }\n    };\n\n    render() {\n        return(\n\n                <Autocomplete className={'main-input'}\n                    options={this.state.citiesAutocompleteList}\n                    getOptionLabel={option => option.cityName}\n                    onChange={(e, value) => {\n                        if(value){\n                            if (value.cityName) {\n                                this.props.getWeather(value.cityName)\n                            }\n                        }\n                    }}\n                    style={{ width: 300 }}\n                    renderInput={params => (\n                        <TextField {...params} onChange={this.handleInputChange} label=\"City\" variant=\"outlined\" fullWidth name={'city'} />\n                    )}\n                />\n\n        );\n    }\n\n\n}\nexport default Input;\n","import React from \"react\";\nimport {getCelsius} from \"../../helpers/getCelsium\";\nimport \"./weatherToday.css\"\n\nfunction WeatherToday(props){\n        return(\n            <div>\n                <div className=\"city-name\">\n                    {props.city}\n                </div>\n                <div className=\"temperature-today\">\n                    {props.temp != null ? getCelsius(props.temp) : null}°C\n                </div>\n                <div className=\"status-today\">\n                    {props.status}\n                </div>\n            </div>\n        );\n}\nexport default WeatherToday\n","import React from \"react\"\n\nimport Button from '@material-ui/core/Button';\nimport {connect} from \"react-redux\";\n\nfunction AddToFavorites(props){\n\n\n\n    // render() {\n        return(\n            <div>\n                {\n                    props.isCurrentCityInFavorites ?\n                        <Button onClick={props.handleRemoveFromFavorites} variant=\"contained\" color=\"secondary\"> Remove from favorites </Button>\n                        : <Button onClick={props.handleAddToFavorites} variant=\"contained\" color=\"secondary\"> Add to favorites </Button>\n\n                }\n            </div>\n        )\n    // }\n}\n\nconst mapStateToProps = state => {\n    return{\n        weather: state.weather,\n        currentCity: state.cityKey.find(city =>city.isCurrent),\n        favorites: state.favorites,\n        cityKey: state.cityKey\n    };\n};\n\nexport default connect(mapStateToProps)(AddToFavorites);\n","import React from \"react\";\nimport { withRouter } from 'react-router-dom'\n\nimport \"./mainForm.css\"\n\nimport {connect} from \"react-redux\";\n\nimport {addToFavorites, removeFromFavorites} from \"../../store/actions/favorites\"\nimport {weatherFetchData} from \"../../store/actions/weather\";\nimport {getWeatherInfoByCityKey} from \"../../store/actions/weather\";\n\nimport Weather from \"../Weather\";\nimport Input from \"../Input\";\nimport WeatherToday from \"../WeatherToday\";\nimport AddToFavorites from \"../AddToFavorites\";\n\nclass  MainForm extends React.Component{\n\n    componentDidMount() {\n        (this.props.match.params.cityKey)?\n            this.props.getWeatherInfoByCityKey(this.props.match.params.cityKey)\n            : this.props.getWeatherInfoByCityKey(\"215854\");\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (this.props.currentCity && prevProps.currentCity.cityKey !== this.props.currentCity.cityKey) {\n            this.props.history.push(`/${this.props.currentCity.cityKey}`);\n        }\n    }\n\n    getWeather = (city) => {\n        this.props.getWeatherData(city);\n    };\n\n    render() {\n        const currentCityWeatherData = this.props.currentCity ? this.props.weather[this.props.match.params.cityKey || this.props.currentCity.cityKey] : null;\n\n        if(currentCityWeatherData && this.props.currentCity){\n            const currentCityFromRoute = this.props.cityKey.find(item => item.cityKey === this.props.match.params.cityKey)\n            const cityName = currentCityFromRoute ? currentCityFromRoute.cityName : this.props.currentCity.cityName;\n\n            return(\n                <div>\n\n                    <Input getWeather = {this.getWeather}/>\n                    <div className=\"weather-today-favorite\">\n                        <WeatherToday\n                            city = {cityName}\n                            temp = {currentCityWeatherData[0].Temperature}\n                            status = {currentCityWeatherData[0].Day.IconPhrase}\n                        />\n                        <AddToFavorites\n                            isCurrentCityInFavorites={this.props.favorites.includes(this.props.currentCity.cityKey)}\n                            handleAddToFavorites={() =>\n                                this.props.favorites.length == 0 ?\n                                    this.props.addToFavorites(this.props.currentCity.cityKey)\n                                        : this.props.favorites.indexOf(this.props.currentCity.cityKey) >=0 ?\n                                            null\n                                            : this.props.addToFavorites(this.props.currentCity.cityKey)\n\n                            }\n                            handleRemoveFromFavorites={() =>\n                                this.props.favorites.length != 0 ?\n                                    this.props.removeFromFavorites(this.props.currentCity.cityKey)\n                                        :null\n                            }\n                        />\n                    </div>\n                    <div className={\"weather-container\"}>\n                    {\n                        (currentCityWeatherData ?\n                            (currentCityWeatherData.map((currentCityWeatherDataItem, index) => (\n                                    <Weather\n                                        key={index}\n                                        date={currentCityWeatherDataItem.EpochDate}\n                                        temp={currentCityWeatherDataItem.Temperature}\n                                        status={currentCityWeatherDataItem.Day.IconPhrase}\n                                    />\n                                )\n                            )) :null)\n                    }\n                    </div>\n                </div>\n            )\n        }\n        return null\n\n\n    }\n}\nconst mapStateToProps = state => {\n  return{\n    weather: state.weather,\n    currentCity: state.cityKey.find(city =>city.isCurrent),\n    favorites: state.favorites,\n    cityKey: state.cityKey\n  };\n};\n\nconst  mapDispatchToProps = {\n    getWeatherInfoByCityKey: (key) => getWeatherInfoByCityKey(key),\n    getWeatherData: (name) => weatherFetchData(name),\n    addToFavorites:  addToFavorites,\n    removeFromFavorites: removeFromFavorites,\n};\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(MainForm));\n","\nexport function addToFavorites(cityKey){\n    const favoritesFromLocalStorage = JSON.parse(localStorage.getItem('favorites')) || [];\n    if (!favoritesFromLocalStorage.includes(cityKey)) {\n        favoritesFromLocalStorage.push(cityKey);\n        localStorage.setItem('favorites', JSON.stringify(favoritesFromLocalStorage));\n    }\n\n    return {\n        type : \"ADD_TO_FAVORITES\",\n        payload: cityKey\n    }\n}\nexport function removeFromFavorites(cityKey){\n    const favoritesFromLocalStorage = JSON.parse(localStorage.getItem('favorites')) || [];\n    if (favoritesFromLocalStorage.includes(cityKey)) {\n\n        favoritesFromLocalStorage.splice(favoritesFromLocalStorage.indexOf(cityKey), 1);\n        localStorage.setItem('favorites', JSON.stringify(favoritesFromLocalStorage));\n    }\n    return{\n        type : \"REMOVE_FROM_FAVORITES\",\n        payload: cityKey\n    }\n}\n","import React from \"react\"\nimport { Link } from 'react-router-dom'\n\nimport Card from '@material-ui/core/Card';\nimport \"./favorites.css\"\nimport {connect} from \"react-redux\";\nimport {getCelsius} from \"../../helpers/getCelsium\";\nimport {getWeatherInfoByCityKey} from \"../../store/actions/weather\";\n\nclass Favorites  extends React.Component{\n\n    componentDidMount() {\n        this.props.favorites.forEach((item) =>\n            this.props.getWeatherInfoByCityKey(item)\n        );\n    }\n\n    render() {\n        return(\n            <div>\n                <div className=\"title\">\n                    Favorites:\n                </div>\n                <div className=\"favorite-items\">\n                    {\n                        // this.props.favorites.length >0 ?\n                        this.props.favorites.map((item, index) =>{\n                            const favoriteCityNameObject = this.props.cityKey.find(ck => ck.cityKey === item);\n                            const weatherForCity = this.props.weather[item];\n\n                            if (!favoriteCityNameObject || !weatherForCity) {\n                                return null;\n                            }\n\n                            return (\n                                <div key={index} className={\"favorite-card\"}>\n                                    <Link  to={`/${favoriteCityNameObject.cityKey}`}>\n                                        <Card>\n                                            <div className={\"city\"}>{favoriteCityNameObject.cityName}</div>\n                                            <div className={\"temperature\"}>{getCelsius(weatherForCity[0].Temperature)}°C</div>\n                                            <div className={\"status\"}>{this.props.weather[item][0].Day.IconPhrase}</div>\n                                        </Card>\n                                    </Link>\n                                </div>\n                                )\n\n                            }\n                        )\n                    }\n                </div>\n                <div>\n                </div>\n            </div>\n        )\n    }\n\n}\n\nconst  mapDispatchToProps = {\n    getWeatherInfoByCityKey: getWeatherInfoByCityKey\n};\n\nconst mapStateToProps = (state) => {\n return  {\n     favorites: state.favorites,\n     weather: state.weather,\n     cityKey: state.cityKey\n }\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Favorites);\n","import React from 'react';\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link\n} from \"react-router-dom\";\n\nimport './App.css';\nimport Header from \"../components/Header\"\nimport MainForm from \"../components/MainForm\";\nimport Favorites from \"../components/Favorites\";\n\nconst API_KEY = 'rXX6gRAGas7dEvJyz21j3Z6pWMRKaJnk';\n\nclass App extends React.Component{\n\n\n  render() {\n    return(\n        <div className={\"App\"}>\n            <Router>\n                <Header />\n                <Switch>\n                    <Route path=\"/favorites\">\n                        <Favorites />\n                    </Route>\n                    <Route exact path=\"/:cityKey?\">\n                        <MainForm />\n                    </Route>\n                </Switch>\n            </Router>\n        </div>\n    );\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from \"react-redux\";\nimport {createStore, applyMiddleware} from \"redux\";\nimport thunk from \"redux-thunk\";\nimport {composeWithDevTools} from \"redux-devtools-extension\";\nimport rootReducer from \"./store/reducers/rootReducer\";\nimport logger from 'redux-logger';\n\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk, logger))\n);\n\n\nReactDOM.render(\n    <Provider store={store}>\n    <App />\n    </Provider>, document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}